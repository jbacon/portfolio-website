[{"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/index.js":"1","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/App.js":"2","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/serviceWorker.js":"3","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/ProviderBundle.js":"4","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/LoadableContent.js":"5","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Home.js":"6","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Header.js":"7","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Blog.js":"8","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/FourOhFour.js":"9","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Footer.js":"10","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/emailJsApiKeys.js":"11","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/CustomThemeProvider.js":"12","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/ConnectDialog.js":"13","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/FadeIntoView.js":"14","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Question.js":"15","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/About.js":"16","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/App.test.js":"17","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/setupTests.js":"18","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2015/multi-page-vs-single-page-applications.js":"19","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2020/building-a-simple-golang-api.js":"20","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2015/a-narrative-on-web-applications.js":"21","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2020/publish-a-react-component.js":"22"},{"size":492,"mtime":1612196653319,"results":"23","hashOfConfig":"24"},{"size":1343,"mtime":1615177218877,"results":"25","hashOfConfig":"24"},{"size":5086,"mtime":1612196653320,"results":"26","hashOfConfig":"24"},{"size":972,"mtime":1612196653317,"results":"27","hashOfConfig":"24"},{"size":2772,"mtime":1615172181729,"results":"28","hashOfConfig":"24"},{"size":9440,"mtime":1615147017073,"results":"29","hashOfConfig":"24"},{"size":3552,"mtime":1615146655121,"results":"30","hashOfConfig":"24"},{"size":5688,"mtime":1615177753613,"results":"31","hashOfConfig":"24"},{"size":304,"mtime":1615174233360,"results":"32","hashOfConfig":"24"},{"size":1445,"mtime":1615146464217,"results":"33","hashOfConfig":"24"},{"size":698,"mtime":1612196653319,"results":"34","hashOfConfig":"24"},{"size":808,"mtime":1612196653315,"results":"35","hashOfConfig":"24"},{"size":10897,"mtime":1612196653315,"results":"36","hashOfConfig":"24"},{"size":1486,"mtime":1612196653315,"results":"37","hashOfConfig":"24"},{"size":4751,"mtime":1612196653317,"results":"38","hashOfConfig":"24"},{"size":572,"mtime":1612196653314,"results":"39","hashOfConfig":"24"},{"size":257,"mtime":1612196653314,"results":"40","hashOfConfig":"24"},{"size":316,"mtime":1612196653320,"results":"41","hashOfConfig":"24"},{"size":4276,"mtime":1615175256699,"results":"42","hashOfConfig":"24"},{"size":6448,"mtime":1615177357504,"results":"43","hashOfConfig":"24"},{"size":5260,"mtime":1615175252083,"results":"44","hashOfConfig":"24"},{"size":9151,"mtime":1615175239445,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"fdugwh",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"71"},"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/index.js",[],["96","97"],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/App.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/serviceWorker.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/ProviderBundle.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/LoadableContent.js",["98"],"/**\r\n * Summary. Adds a form for users to email a question regarding the current page.\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Backdrop, LinearProgress, CircularProgress } from '@material-ui/core';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst LoadableContent = (props) => (\r\n    <div style={{ position: \"relative\" }}>\r\n        {props.children}\r\n        <Backdrop open={props.isLoading || props.isError || props.isSuccess} style={{ zIndex: 9999, flexDirection: \"column\", position: props.fullScreen ? \"fixed\": \"absolute\" }}>\r\n            {props.isLoading &&\r\n                <CircularProgress variant=\"indeterminate\"/>\r\n            }\r\n            <Collapse in={props.isError}>\r\n                <Alert\r\n                    variant=\"filled\"\r\n                    severity=\"error\"\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={props.onClose}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                    }>\r\n                    <AlertTitle>Oops!</AlertTitle>\r\n                    {props.errorMessage}\r\n                </Alert>\r\n            </Collapse>\r\n            <Collapse in={props.isSuccess}>\r\n                <Alert\r\n                    variant=\"filled\"\r\n                    severity=\"success\"\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={props.onClose}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                    }>\r\n                    <AlertTitle>Success!</AlertTitle>\r\n                    {props.successMessage}\r\n                </Alert>\r\n            </Collapse>\r\n        </Backdrop>\r\n    </div>\r\n)\r\n\r\nLoadableContent.propTypes = {\r\n    isLoading: PropTypes.bool.isRequired,\r\n    isSuccess: PropTypes.bool,\r\n    isError: PropTypes.bool,\r\n    successMessage: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    onClose: PropTypes.func,\r\n    fullScreen: PropTypes.bool\r\n};\r\nLoadableContent.defaultProps = {\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    isError: false,\r\n    errorMessage: \"Something went wrong\",\r\n    fullScreen: false,\r\n};\r\n\r\n\r\nexport default LoadableContent","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Home.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Header.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Blog.js",["99","100"],"import { IconButton, Typography } from '@material-ui/core';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Container from '@material-ui/core/Container';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport React from 'react';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nimport { Template2 } from \"../emailJsApiKeys\";\r\nimport Question from './Question';\r\nimport { LightThemeProvider } from \"./CustomThemeProvider\"\r\nimport {\r\n  Route\r\n} from \"react-router-dom\";\r\nimport ReactMarkdown from 'react-markdown';\r\nimport Highlight from 'react-highlight.js';\r\nimport gfm from 'remark-gfm'\r\n\r\n// arrays maintain order, objects do not\r\n// [ { year: [ {article-url: article-title }]}]\r\nconst BlogStructure = [\r\n    { 2020: [\r\n        { \"markdown-and-react.md\": \"Markdown And React\" },\r\n        { \"building-a-simple-golang-api.js\": \"Building A Simple GoLang API\" },\r\n        { \"publish-a-react-component.js\": \"Publishing A React Component\" },\r\n    ]},\r\n    { 2015: [\r\n        { \"a-narrative-on-web-applications.js\": \"A Narrative On Web Applications\" },\r\n        { \"multi-page-vs-single-page-applications.js\": \"Multi-page vs Single-page Applications\" }\r\n    ]}\r\n]\r\n\r\nconst Blog = (props) => (\r\n    <Container>\r\n        <br />\r\n        {props.children}\r\n        <br />\r\n        <br />\r\n        <Question\r\n            emailJsUserId={Template2.USER_ID}\r\n            emailJsServiceId={Template2.SERVICE_ID}\r\n            emailJsTemplateId={Template2.TEMPLATE_ID} />\r\n        <br />\r\n    </Container>\r\n);\r\n\r\nconst BlogMenu = (props) => (\r\n    <LightThemeProvider>\r\n    <Drawer anchor=\"right\" open={props.open} onClose={props.onClose}>\r\n        <div style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'flex-start',\r\n        }}>\r\n            <IconButton onClick={props.onClose}><ChevronRightIcon /></IconButton>\r\n        </div>\r\n        {BlogStructure.map((yearObj, i) => {\r\n            let year = Object.keys(yearObj)[0]\r\n            let yearArticlesList = yearObj[year]\r\n            return (\r\n                <Accordion key={i} defaultExpanded={(i === 0) ? true : false}>\r\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />} >\r\n                        <Typography>{year}</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <List>\r\n                            {yearArticlesList.map((articleObj, j) => {\r\n                                let articleFilename = Object.keys(articleObj)[0]\r\n                                const dotIndex = articleFilename.indexOf(\".\")\r\n                                const article = articleFilename.substring(0, dotIndex)\r\n                                let articleTitle = articleObj[articleFilename]\r\n                                return (\r\n                                    <ListItem button key={j} component={Link} onClick={props.onClose} to={\"/blogs/\" + year + \"/\" + article}>\r\n                                        <ListItemText primary={articleTitle} />\r\n                                    </ListItem>\r\n                                )\r\n                            })}\r\n                        </List>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            )\r\n        })}\r\n    </Drawer>\r\n    </LightThemeProvider>\r\n);\r\n\r\nconst MarkdownBlog = (props) => {\r\n    const [markdown, setMarkdown] = React.useState(\"\");\r\n\r\n    React.useEffect( () => {\r\n        // Anything in here is fired on component mount.\r\n        fetch(props.url).then(res => res.text()).then(text => setMarkdown(text));\r\n     }, [props]);\r\n     \r\n     return (\r\n    <Container >\r\n        <ReactMarkdown\r\n            renderers={{\r\n                link: props => <Link {...props} />,\r\n                code: ({language, value}) => <Highlight language={language} children={value} />\r\n            }}\r\n            plugins={[[gfm, {singleTilde: false}]]} source={markdown} />\r\n    </Container>\r\n     )\r\n};\r\n\r\nconst GetBlogRoutes = () => BlogStructure.map((yearObj, i) => {\r\n    const year = Object.keys(yearObj)[0]\r\n    const yearArticlesList = yearObj[year]\r\n    return (\r\n        yearArticlesList.map((articleObj, j) => {\r\n            const articleFilename = Object.keys(articleObj)[0]\r\n            const dotIndex = articleFilename.indexOf(\".\")\r\n            const articleExtension = articleFilename.substring(dotIndex)\r\n            const article = articleFilename.substring(0, dotIndex)\r\n            const url = \"/blogs/\" + year + \"/\" + article\r\n            const LazyComponent = React.lazy(async () => {\r\n                await new Promise(resolve => setTimeout(resolve,300))\r\n                return import(\"..\"+url)\r\n            })\r\n            // if(articleExtension === \".md\") {\r\n            //     LazyComponent = <MarkdownBlog url={\".\"+url}/>\r\n            // } else {\r\n            //     LazyComponent = React.lazy(async () => {\r\n            //         await new Promise(resolve => setTimeout(resolve,300))\r\n            //         return import(\".\"+url)\r\n            //     })\r\n            // }\r\n            return <Route key={i+\"\"+j} path={url} render={() => <Blog><LazyComponent/></Blog>} />\r\n        })\r\n    )\r\n})\r\n\r\n\r\n\r\nexport {\r\n    BlogMenu,\r\n    GetBlogRoutes\r\n}\r\n\r\nexport default Blog","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/FourOhFour.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Footer.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/emailJsApiKeys.js",[],["101","102"],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/CustomThemeProvider.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/ConnectDialog.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/FadeIntoView.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/Question.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/components/About.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/App.test.js",[],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/setupTests.js",["103"],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2015/multi-page-vs-single-page-applications.js",["104"],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2020/building-a-simple-golang-api.js",["105"],"import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Blog from '../../components/Blog'\r\nimport Highlight from \"react-highlight.js\"\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst blog = (props) => (\r\n    <React.Fragment>\r\n        <Typography variant=\"h2\">GoLang Servers:<br />A Basic Demo</Typography>\r\n        <Typography>\r\n        <br/>\r\n        This post covers a few basic techniques:<br/>\r\n        </Typography>\r\n        <ul>\r\n            <li>Handlers</li>\r\n            <li>Databases</li>\r\n            <li>Middleware</li>\r\n            <li>Logging</li>\r\n        </ul><br/>\r\n        <Typography>\r\n        Let's start by building a dead simple GoLang HTTP Server<br />\r\n        We will not use any 3rd party libraries in this demonstration.<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"net/http\"\r\n)\r\n\r\nfunc helloWorld(responseWriter http.ResponseWriter, request *http.Request) {\r\n    response := []byte(\"Hello World\")\r\n    responseWriter.Write(response)\r\n}\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/hello-world\", helloWorld)\r\n    http.ListenAndServe(\":8080\", nil)\r\n}`}\r\n        </Highlight>\r\n        <Typography>\r\n        Done. Pretty easy eh!? Let's break it down...<br/><br/>\r\n        </Typography>\r\n        <Typography variant=\"h4\">Handlers</Typography>\r\n        <Typography>\r\n        The starting point of our demonstration is <b>http.ListenAndServe</b>.<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`func ListenAndServe(addr string, handler Handler) error`}\r\n        </Highlight>\r\n        <Typography>\r\n        Notice our original code only passes <b>nil</b>, and not a <b>Handler</b>.<br/>\r\n        We might expect <b>http.HandleFunc</b> to return our desired <b>http.Handler</b>.<br/>\r\n        However, <b>http.HandleFunc</b> actually adds our Handler to a shared context automatically: <b>http.DefaultServeMux</b>.<br/>\r\n        The <b>Server</b> is sharing this same context, which explains our <b>nil</b>.<br/>\r\n        In GoLang a <b>http.ServeMux</b> is a <b>http.Handler</b> with additional responsibilities as a \"request multiplexer\".<br/>\r\n        To illustrate, we create a different mux (handler) like so:<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`serveMux := http.NewServeMux()\r\nserveMux.HandleFunc(\"/hello-world\", helloWorld)\r\nhttp.ListenAndServe(\":8080\", serveMux)`}\r\n        </Highlight>\r\n        <Typography>\r\n        We could also pass the handler directly, if we so choose:\r\n        </Typography>\r\n        <Highlight>\r\n{`serveMux := http.NewServeMux()\r\nhandler := serveMux.HandleFunc(\"/hello-world\", helloWorld)\r\nhttp.ListenAndServe(\":8080\", handler)`}\r\n        </Highlight>\r\n        <Typography>\r\n        Moving along to our function.. we must pay special attention to out signature.\r\n        </Typography>\r\n        <Highlight>\r\n{`func helloWorld(responseWriter http.ResponseWriter, request *http.Request) { ... }`}\r\n        </Highlight>\r\n        <Typography>\r\n        This implements the proper input type for <b>handleFunc</b>.\r\n        So far, this is a very basic server.... let's add more functionality.<br/><br/>\r\n        </Typography>\r\n        <Typography variant=\"h4\">Database Clients</Typography>\r\n        <Typography>\r\n        Our server now needs to handle a database layer that is initialized in main:\r\n        </Typography>\r\n        <Highlight>\r\n{`sqlClient, err := sql.Open(\"sqlite3\", \"./database.db\")\r\nif err != nil {\r\n    log.Fatalf(\"Could not open db: %v\", err)\r\n}`}\r\n        </Highlight>\r\n        <Typography>\r\n        This leaves us asking:<br/>\r\n        </Typography>\r\n        <ul>\r\n            <li>How will our handlers access the database client?</li>\r\n        </ul>\r\n        <Typography>\r\n        While <b>sqlClient</b> could be used globally, that would not be elegant.<br/>\r\n        One solution is to create a wrapper around our <b>handlerFunc</b>. Like so...<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`func helloWorld(sqlClient *sql.DB) http.Handler {\r\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n        ... your logic ... \r\n    })\r\n}`}\r\n        </Highlight>\r\n        <Typography>\r\n        This neat treat exposes our <b>sqlClient</b> scope to our custom function inside <b>HandlerFunc</b>.<br/>\r\n        We can now, re-write main:<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`httpHandler := helloWorld(sqlClient)\r\nhttp.ListenAndServe(\":8080\", httpHandler)`}\r\n        </Highlight>\r\n        <Typography>\r\n        This wrapper technique also allows us to create nifty middleware.<br/>\r\n        <br/>\r\n        </Typography>\r\n        <Typography variant=\"h3\">Middleware</Typography>\r\n        <Typography>\r\n        Chaining middleware is a critical feature of any server routing solution.<br/>\r\n        We can use the same wrapper design above, with slight modification.<br/>\r\n        Instead of accepting a <b>sqlClient</b> input, middleware will accept another <b>http.Handler</b>.\r\n        </Typography>\r\n        <Highlight>\r\n{`func middleware(next http.Handler) http.Handler {\r\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n        ...\r\n    }\r\n }`}\r\n        </Highlight>\r\n        <br/>\r\n        <Typography variant=\"h3\">Logging</Typography>\r\n        <Typography>\r\n        Using middleware, we can now create a logging framework.<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`func loggerMiddleware(next http.Handler) http.Handler { \r\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\tlog.Println(\"Request received\")\r\n\t\tnext.ServeHTTP(w, r)\r\n\t\tlog.Println(\"Request handled\")\r\n    })\r\n}`}\r\n        </Highlight>\r\n        <Typography>\r\n        The key understanding here being <b>next.ServeHTTP</b>, which calls the inner handler.<br/>\r\n        We can use our new logging middleware like so:\r\n        </Typography>\r\n        <Highlight>\r\n{`handler := loggingMiddleware(helloWorld(sqlClient)))\r\nhttp.ListenAndServe(\":8080\", handler)`}\r\n        </Highlight>\r\n        <Typography>\r\n        Now.. it's a chain.<br/><br/>\r\n\r\n        To view the full source for this demonstration, visit my <Link href='https://github.com/jbacon/api-joshbacon-name' target=\"_blank\">GitHub Repo</Link>.<br/><br/>\r\n\r\n        I hope this article was helpful.<br/>\r\n        GoLang is a nifty language for building both simple and complex http servers.\r\n        </Typography>\r\n    </React.Fragment>\r\n);\r\nexport default blog","/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2015/a-narrative-on-web-applications.js",["106"],"/Users/joshbacon/Development/github.com/jbacon/blog-static-site-react/src/blogs/2020/publish-a-react-component.js",["107"],"import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport Blog from '../../components/Blog'\r\nimport Link from '@material-ui/core/Link';\r\nimport Highlight from \"react-highlight.js\"\r\n\r\nconst blog = (props) => (\r\n    <React.Fragment>\r\n        <Typography variant=\"h2\">How To Publish<br />React Components</Typography>\r\n        <Typography>\r\n        <br/>\r\n        So you built a nifty component and want to share it with the world..<br/>\r\n        or maybe re-use across projects. Either way, you need a efficient means of publication.<br/>\r\n        Many 3rd party solutions do exist (see <Link href='https://bit.dev/' target=\"_blank\">bit.dev</Link>); but this guide explores an simple strategy using NPM.<br/>\r\n        <br/>\r\n        In this tutorial we will walk through project configurations for hosting a single component, and here are our requirements:\r\n        </Typography>\r\n        <ul>\r\n            <li>Good Dev Experience: Create React App</li>\r\n            <li>Single Repo: Via GitHub</li>\r\n            <li>Live Working Demo: GitHub Pages</li>\r\n            <li>Tests: Jest</li>\r\n            <li>CI/CD: Travis</li>\r\n            <li>Public Hosting: NPM</li>\r\n        </ul><br/>\r\n        <Typography variant=\"h4\">Create React App</Typography>\r\n        <Typography>\r\n        Even though the component is not a fully fledge app, we still use CRA to provision our project, which ramps up a live working demo.<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`npm install -g create-react-app\r\nnpx create-react-app my-app\r\ncd my-app\r\nnpm start`}\r\n        </Highlight>\r\n        <Typography>\r\n        The default project will need minor tweaks..<br/>\r\n        <br/>\r\n        First, add the following to <b>package.json</b>\r\n        </Typography>\r\n        <Highlight>\r\n{`\"main\": \"build-component/index.js\",\r\n\"module\": \"build-component/index.js\",\r\n\"private\": false,\r\n\"homepage\": \".\",\r\n\"publishConfig\": {\r\n    \"access\": \"public\"\r\n},\r\n\"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/jbacon/react-component-progress-indicator\"\r\n}`}\r\n        </Highlight>\r\n        <Typography>\r\n        Replacing <b>repository.url</b> with your projects repo.<br/>\r\n        <br/>\r\n        Also inside <b>package.json</b>, add a new <b>script</b> called <b>build-component</b> containing the following command:<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`NODE_ENV=production && rm -rf build-component && mkdir build-component && npx babel src/Component --out-dir build-component --copy-files`}\r\n        </Highlight>\r\n        <Typography>\r\n        This build command requires us to install a new babel dependency, which is not included with CRA by default.\r\n        </Typography>\r\n        <Highlight>\r\n{`npm install --save-dev @babel/cli`}\r\n        </Highlight>   \r\n        <Typography>\r\n        <br/>\r\n        Next, add the line <b>\"/build-component\"</b> to the <b>.gitignore</b> file.<br/>\r\n        Then, make a new file <b>.npmignore</b> with contents copied from <b>.gitignore</b>.<br/>\r\n        Append these additional lines inside <b>.npmignore</b>:<br/>\r\n        </Typography>\r\n        <Highlight>\r\n{`## Additioanl lines for npmignore\r\n/public/\r\n/src/\r\n.travis.yml\r\n.eslintcache\r\nREADME.md\r\n/build\r\n!/build-component`}\r\n        </Highlight>\r\n        <Typography>\r\n        This step reduces the package size of our component on NPM. Our package should only include the <b>/build-component</b> folder.<br/>\r\n        However, we can further reduce package size by examining our default CRA dependencies.<br/>\r\n        Some CRA dependencies are unnecessary for our component package.<br/>\r\n        Move all dependencies <b>except \"react\"</b> from <b>package.json/dependencies</b> to <b>package.json/devDependencies</b>.\r\n        This allows us to release a small production package for our component, while maintaining the ability to develop our demo app.<br/>\r\n        <br/>\r\n        We're all done setting up our CRA application, and are ready to start developing.\r\n        <br/>\r\n        </Typography>\r\n        <br/>\r\n        <Typography variant=\"h4\">Our Component</Typography>\r\n        <Typography>\r\n        Our component will be a simple grey background overly.<br/>\r\n        Create a new file <b>\"src/Component/index.js\"</b> and paste the following code:\r\n        </Typography>\r\n        <Highlight>\r\n{`import React from 'react';\r\n\r\nconst BackgroundGrey = (props) => (\r\n    <div style={{ backgroundColor: \"grey\" }}>{props.children}</div>\r\n)\r\n\r\nexport default BackgroundGrey`}\r\n        </Highlight>\r\n        <Typography>\r\n        Now in <b>App.js</b>, we write code to demonstration our new component.\r\n        </Typography>\r\n        <Highlight>\r\n{`import logo from './logo.svg';\r\nimport './App.css';\r\nimport BackgroundGrey from \"./Component\"\r\n\r\nfunction App() {\r\n  return (\r\n    <BackgroundGrey>\r\n        <p>Hello World</p>\r\n    </BackgroundGrey>\r\n  );\r\n}\r\n\r\nexport default App;`}\r\n        </Highlight>\r\n        <Typography>\r\n        We must also fix the default tests in <b>App.test.js</b>, like so...\r\n        </Typography>\r\n        <Highlight>\r\n{`import { render, screen } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n  render(<App />);\r\n  const linkElement = screen.getByText(/Hello World/i);\r\n  expect(linkElement).toBeInTheDocument();\r\n});`}\r\n        </Highlight>\r\n        <Typography>\r\n        Our component is now ready to test and run.\r\n        </Typography>\r\n        <Highlight>\r\n{`npm install;\r\nnpm run test;\r\nnpm run start;`}\r\n        </Highlight>\r\n        <br/>\r\n        <Typography variant=\"h4\">CI/CD: Travis</Typography>\r\n        <Typography>\r\n        Deployment of any production code needs to start with CI/CD. \r\n        For this guide I will assume your project is hosted via GitHub and integrated with Travis.\r\n        Travis will package, test, and deploy to NPM.\r\n        GitHub Pages will host our demonstration code into a live working site, which can be added to the README for instructional purposes. <br/>\r\n        <br/>\r\n        All this can be accomplished with the follow <b>.travis.yml</b> file\r\n        </Typography>\r\n        <Highlight>\r\n{`language: bash\r\nsudo: required\r\ndist: trusty\r\nservices:\r\n- docker\r\ngit:\r\n  depth: 1\r\n  submodules: false\r\nbranches:\r\n  only:\r\n  - main\r\ncache:\r\n  directories:\r\n  - node_modules\r\nenv:\r\n  global:\r\n  - PATH=$HOME/.local/bin:$PATH\r\n  - CI=true\r\nbefore_install:\r\n- echo \"Before Install...\"\r\ninstall:\r\n- docker run -e CI=true -i -t -v \\${PWD}/:/app/ --workdir /app/ node:14-stretch npm install\r\nbefore_script:\r\n- docker run -e CI=true -i -t -v \\${PWD}/:/app/ --workdir /app/ node:14-stretch npm test -- --coverage\r\nscript:\r\n- docker run -e CI=true -i -t -v \\${PWD}/:/app/ --workdir /app/ node:14-stretch npm run-script build\r\n- docker run -e CI=true -i -t -v \\${PWD}/:/app/ --workdir /app/ node:14-stretch npm run-script build-component\r\nafter_script:\r\n- echo \"After Script...\"\r\nbefore_cache:\r\n- echo \"Before Cache...\"\r\nafter_success:\r\n- echo \"After Success...\"\r\nafter_failure:\r\n- echo \"After Failure...\"\r\nbefore_deploy:\r\n- echo \"Before Deploy...\"\r\ndeploy:\r\n  - provider: script\r\n    script: docker run -e CI=true -e NPM_TOKEN=\"\\${NPM_TOKEN}\" -i -t -v \\${PWD}/:/app/ --workdir /app/ node:14-stretch bash -c 'npm config set \"//registry.npmjs.org/:_authToken=\\${NPM_TOKEN}\" && npm publish'\r\n    on:\r\n      branch: main\r\n    skip_cleanup: true\r\n  - provider: pages\r\n    local_dir: \\${PWD}/build/\r\n    skip_cleanup: true\r\n    github_token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable\r\n    keep_history: true\r\n    on:\r\n      branch: main\r\nafter_deploy:\r\n  - echo \"After Deploy...\"`}\r\n        </Highlight>\r\n        <Typography>\r\n        Key features to highlight include the usage of two <b>deploy</b> commands, one for NPM and one for GitHub Pages. Also the usage of two build <b>script</b>.\r\n        Also notable, is our usage of <b>docker</b>, which allows us to ensure a consistent build environment for our source.\r\n        Variables must be set in your CI/CD environment for: <b>NPM_TOKEN</b> and <b></b>\r\n        <br/>\r\n        </Typography>\r\n        <br/>\r\n        <Typography variant=\"h4\">Publish to NPM</Typography>\r\n        <Typography>\r\n        Once you're ready to publish, simply merge your dev/feature branch into the <b>main</b> branch. Travis will kick off a build and deploy. And you can check your configured NPM registry.<br/>\r\n        <br/>\r\n        </Typography>\r\n        <Typography variant=\"h4\">That's All!</Typography>\r\n        <Typography>\r\n        Hope this has been helpful! If you have many related components, you can include them into this same package.<br/>\r\n        However you may also want to consider adapting a more scalable enterprise strategy using 3rd party component libraries: <Link href='https://bit.dev/' target=\"_blank\">bit.dev</Link>\r\n        <br/>\r\n        To see a live example component, visit my github here: <Link href='>https://github.com/jbacon/react-component-progress-indicator' target=\"_blank\">React Progress Indicator</Link>.<br/>\r\n        </Typography>\r\n    </React.Fragment>\r\n);\r\nexport default blog",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":6,"column":20,"nodeType":"114","messageId":"115","endLine":6,"endColumn":34},{"ruleId":"112","severity":1,"message":"116","line":94,"column":7,"nodeType":"114","messageId":"115","endLine":94,"endColumn":19},{"ruleId":"112","severity":1,"message":"117","line":121,"column":19,"nodeType":"114","messageId":"115","endLine":121,"endColumn":35},{"ruleId":"108","replacedBy":"118"},{"ruleId":"110","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":4,"column":5,"nodeType":"122","messageId":"123","endLine":4,"endColumn":21},{"ruleId":"112","severity":1,"message":"124","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":12},{"ruleId":"112","severity":1,"message":"124","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":12},{"ruleId":"112","severity":1,"message":"124","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":12},{"ruleId":"112","severity":1,"message":"124","line":3,"column":8,"nodeType":"114","messageId":"115","endLine":3,"endColumn":12},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'LinearProgress' is defined but never used.","Identifier","unusedVar","'MarkdownBlog' is assigned a value but never used.","'articleExtension' is assigned a value but never used.",["125"],["126"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Blog' is defined but never used.","no-global-assign","no-unsafe-negation"]